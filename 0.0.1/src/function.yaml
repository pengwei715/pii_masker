kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: f3378a7ab25ce1c20ac5d313dbc3ee7f207239e2
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: git@github.com-personal:pengwei715/pii_masker.git#af062bd4ad903ddb2eba5e56c1a136e1d1287cec:pii_recognizer.py
    origin_filename: pii_recognizer.py
  entry_points:
    create_pattern_recognizer:
      name: create_pattern_recognizer
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 44
    load:
      name: load
      doc: Load the model, not used. Model is loaded during initialization.
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 297
    get_supported_entities:
      name: get_supported_entities
      doc: Return supported entities from the Analyzer Engine.
      parameters: []
      outputs:
      - default: ''
        doc: The list of supported entities.
      lineno: 438
    build_spacy_explanation:
      name: build_spacy_explanation
      doc: Create explanation for why this result was detected.
      parameters:
      - name: self
        default: ''
      - name: original_score
        type: float
        doc: Score given by this recognizer
        default: ''
      - name: explanation
        type: str
        doc: Explanation string
        default: ''
      outputs:
      - default: ''
        doc: AnalysisExplanation object
        type: AnalysisExplanation
      lineno: 122
    analyze:
      name: analyze
      doc: Analyze input using Analyzer engine and input arguments (kwargs).
      parameters: []
      outputs:
      - default: ''
        doc: The list of Presidio RecognizerResult constructed from the recognized
      lineno: 445
    build_flair_explanation:
      name: build_flair_explanation
      doc: Create explanation for why this result was detected.
      parameters:
      - name: self
        default: ''
      - name: original_score
        type: float
        doc: Score given by this recognizer
        default: ''
      - name: explanation
        type: str
        doc: Explanation string
        default: ''
      outputs:
      - default: ''
        doc: AnalysisExplanation
        type: AnalysisExplanation
      lineno: 372
    analyzer_engine:
      name: analyzer_engine
      doc: Return AnalyzerEngine.
      parameters:
      - name: model
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: whole
      outputs:
      - default: ''
        doc: AnalyzerEngine
      lineno: 397
    anonymizer_engine:
      name: anonymizer_engine
      doc: Return AnonymizerEngine.
      parameters: []
      outputs:
      - default: ''
        doc: The AnonymizerEngine.
      lineno: 431
    anonymize:
      name: anonymize
      doc: Anonymize identified input using Presidio Abonymizer.
      parameters:
      - name: text
        doc: The text for analysis.
        default: ''
      - name: analyze_results
        doc: The list of Presidio RecognizerResult constructed from
        default: ''
      outputs:
      - default: ''
        doc: The anonymized text.
      lineno: 455
    annotate:
      name: annotate
      doc: Annotate identified input using Presidio Anonymizer.
      parameters:
      - name: text
        doc: The text for analysis.
        default: ''
      - name: st_analyze_results
        doc: The list of Presidio RecognizerResult constructed from
        default: ''
      - name: st_entities
        default: ''
      outputs:
      - default: ''
        doc: The list of tokens with the identified entities.
      lineno: 467
    default:
      name: default
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: o
        default: ''
      outputs:
      - default: ''
      lineno: 500
    process:
      name: process
      doc: Process the input file and generate the output file.
      parameters:
      - name: input_file
        doc: Input file path
        default: ''
      - name: output_file
        doc: Output file path
        default: ''
      - name: model
        doc: Model to use for processing
        default: ''
      outputs:
      - default: ''
      lineno: 505
  description: This function is used to recognize PII in a given text
  default_handler: process
  disable_auto_mount: false
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
