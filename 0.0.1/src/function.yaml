kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: 5902a36fca44c6714eae41c055f2dafdaa8822ec
  project: default
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: git@github.com-personal:pengwei715/pii_masker.git#370a7a9ee3769772c0d6294e9daa1c7fbd295364:pii_recognizer.py
    origin_filename: pii_recognizer.py
  entry_points:
    create_pattern_recognizer:
      name: create_pattern_recognizer
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 43
    load:
      name: load
      doc: Load the model, not used. Model is loaded during initialization.
      parameters:
      - name: self
        default: ''
      outputs:
      - default: ''
      lineno: 296
    get_supported_entities:
      name: get_supported_entities
      doc: Return supported entities from the Analyzer Engine.
      parameters: []
      outputs:
      - default: ''
        doc: The list of supported entities.
      lineno: 437
    build_spacy_explanation:
      name: build_spacy_explanation
      doc: Create explanation for why this result was detected.
      parameters:
      - name: self
        default: ''
      - name: original_score
        type: float
        doc: Score given by this recognizer
        default: ''
      - name: explanation
        type: str
        doc: Explanation string
        default: ''
      outputs:
      - default: ''
        doc: AnalysisExplanation object
        type: AnalysisExplanation
      lineno: 121
    analyze:
      name: analyze
      doc: Analyze input using Analyzer engine and input arguments (kwargs).
      parameters: []
      outputs:
      - default: ''
        doc: The list of Presidio RecognizerResult constructed from the recognized
      lineno: 444
    build_flair_explanation:
      name: build_flair_explanation
      doc: Create explanation for why this result was detected.
      parameters:
      - name: self
        default: ''
      - name: original_score
        type: float
        doc: Score given by this recognizer
        default: ''
      - name: explanation
        type: str
        doc: Explanation string
        default: ''
      outputs:
      - default: ''
        doc: AnalysisExplanation
        type: AnalysisExplanation
      lineno: 371
    analyzer_engine:
      name: analyzer_engine
      doc: Return AnalyzerEngine.
      parameters:
      - name: model
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: whole
      outputs:
      - default: ''
        doc: AnalyzerEngine
      lineno: 396
    anonymizer_engine:
      name: anonymizer_engine
      doc: Return AnonymizerEngine.
      parameters: []
      outputs:
      - default: ''
        doc: The AnonymizerEngine.
      lineno: 430
    anonymize:
      name: anonymize
      doc: Anonymize identified input using Presidio Abonymizer.
      parameters:
      - name: text
        doc: The text for analysis.
        default: ''
      - name: analyze_results
        doc: The list of Presidio RecognizerResult constructed from
        default: ''
      outputs:
      - default: ''
        doc: The anonymized text.
      lineno: 454
    annotate:
      name: annotate
      doc: Annotate identified input using Presidio Anonymizer.
      parameters:
      - name: text
        doc: The text for analysis.
        default: ''
      - name: st_analyze_results
        doc: The list of Presidio RecognizerResult constructed from
        default: ''
      - name: st_entities
        default: ''
      outputs:
      - default: ''
        doc: The list of tokens with the identified entities.
      lineno: 466
    default:
      name: default
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: o
        default: ''
      outputs:
      - default: ''
      lineno: 499
    process:
      name: process
      doc: Process the text of str using the model.
      parameters:
      - name: text
        type: str
        default: ''
      - name: model
        type: str
        doc: Model to use for processing
        default: whole
      outputs:
      - default: ''
        doc: The anonymized text, the html string and the stats report.
      lineno: 503
  description: This function is used to recognize PII in a given text
  default_handler: process
  disable_auto_mount: false
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: igz-workload-medium
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false
